# .github/workflows/ci.yml

name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: 🔻 Checkout Code
      uses: actions/checkout@v4

    - name: 🔧 Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        # Testing tools
        pip install pytest playwright requests pytest-json-report
        # Machine Learning for QA
        pip install scikit-learn joblib pandas
        # Browser setup
        playwright install chromium

    - name: 💾 Install Newman for API Tests
      run: |
        npm install -g newman

    # 🔮 PREDIKSI RISIKO KEGAGALAN DENGAN AI
    - name: 🔮 Predict Test Failure Risk
      run: |
        python ai/predict_risk.py

    # ⚡ PRIORITAS BERDASARKAN RISIKO
    - name: ⚡ Prioritize High-Risk Tests
      run: |
        python scripts/prioritize_tests.py

    # 🧪 JALANKAN TEST SESUAI URUTAN PRIORITAS
    - name: 🧪 Run Tests in Priority Order
      run: |
        if [ -f "data/prioritized_tests.txt" ]; then
          echo "🔁 Menjalankan test sesuai prioritas..."
          while IFS= read -r test; do
            echo "🏃 Menjalankan: $test"
            pytest "$test" --json-report --json-report-file="data/results/pytest-report.json"
          done < data/prioritized_tests.txt
        else
          echo "⚠️ File prioritas tidak ditemukan. Jalankan semua test."
          pytest tests/ --json-report --json-report-file=data/results/pytest-report.json
        fi

    # 🌐 JALANKAN API TESTS DENGAN POSTMAN + NEWMAN
    - name: 🌐 Run API Tests with Postman (Newman)
      run: |
        newman run postman/collections/api-tests.json \
          --environment postman/environments/dev-environment.json \
          --reporters cli,json \
          --reporter-json-export data/results/api-report.json

    # 📊 GENERATE QUALITY DASHBOARD
    - name: 📊 Generate Quality Dashboard
      run: |
        python dashboard/quality_dashboard.py

    # 🔍 DETEKSI FLAKY TEST
    - name: 🕵️ Detect Flaky Tests
      run: |
        python scripts/detect_flaky.py

    # 💾 SIMPAN HASIL TERBARU
    - name: 📥 Upload Latest Test Report
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: data/results/

    # 📂 SIMPAN HISTORI UNTUK ANALISIS & AI
    - name: 📂 Save Historical Reports
      run: |
        mkdir -p history
        cp data/results/pytest-report.json history/report_$(date +%Y%m%d_%H%M%S).json
      if: success()

    - name: 📦 Upload History
      uses: actions/upload-artifact@v4
      with:
        name: test-history
        path: history/
        retention-days: 30